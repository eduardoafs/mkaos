/**
 */
package KAOSModel.provider;

import KAOSModel.util.KAOSModelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class KAOSModelItemProviderAdapterFactory extends KAOSModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public KAOSModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.KAOS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KAOSItemProvider kaosItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.KAOS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKAOSAdapter() {
		if (kaosItemProvider == null) {
			kaosItemProvider = new KAOSItemProvider(this);
		}

		return kaosItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.OperationNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationNodeItemProvider operationNodeItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.OperationNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationNodeAdapter() {
		if (operationNodeItemProvider == null) {
			operationNodeItemProvider = new OperationNodeItemProvider(this);
		}

		return operationNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.Associations} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationsItemProvider associationsItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.Associations}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationsAdapter() {
		if (associationsItemProvider == null) {
			associationsItemProvider = new AssociationsItemProvider(this);
		}

		return associationsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.SoftwareAgent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftwareAgentItemProvider softwareAgentItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.SoftwareAgent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftwareAgentAdapter() {
		if (softwareAgentItemProvider == null) {
			softwareAgentItemProvider = new SoftwareAgentItemProvider(this);
		}

		return softwareAgentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.EnvironmentAgent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnvironmentAgentItemProvider environmentAgentItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.EnvironmentAgent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnvironmentAgentAdapter() {
		if (environmentAgentItemProvider == null) {
			environmentAgentItemProvider = new EnvironmentAgentItemProvider(this);
		}

		return environmentAgentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.Obstacle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObstacleItemProvider obstacleItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.Obstacle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObstacleAdapter() {
		if (obstacleItemProvider == null) {
			obstacleItemProvider = new ObstacleItemProvider(this);
		}

		return obstacleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.Goal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalItemProvider goalItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.Goal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalAdapter() {
		if (goalItemProvider == null) {
			goalItemProvider = new GoalItemProvider(this);
		}

		return goalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.AssignmentLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignmentLinkItemProvider assignmentLinkItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.AssignmentLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignmentLinkAdapter() {
		if (assignmentLinkItemProvider == null) {
			assignmentLinkItemProvider = new AssignmentLinkItemProvider(this);
		}

		return assignmentLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.ConflictLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConflictLinkItemProvider conflictLinkItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.ConflictLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConflictLinkAdapter() {
		if (conflictLinkItemProvider == null) {
			conflictLinkItemProvider = new ConflictLinkItemProvider(this);
		}

		return conflictLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.ObstructionLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObstructionLinkItemProvider obstructionLinkItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.ObstructionLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObstructionLinkAdapter() {
		if (obstructionLinkItemProvider == null) {
			obstructionLinkItemProvider = new ObstructionLinkItemProvider(this);
		}

		return obstructionLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.OutputLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputLinkItemProvider outputLinkItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.OutputLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputLinkAdapter() {
		if (outputLinkItemProvider == null) {
			outputLinkItemProvider = new OutputLinkItemProvider(this);
		}

		return outputLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.Expectation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpectationItemProvider expectationItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.Expectation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpectationAdapter() {
		if (expectationItemProvider == null) {
			expectationItemProvider = new ExpectationItemProvider(this);
		}

		return expectationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.InputLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputLinkItemProvider inputLinkItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.InputLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputLinkAdapter() {
		if (inputLinkItemProvider == null) {
			inputLinkItemProvider = new InputLinkItemProvider(this);
		}

		return inputLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.Refinement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefinementItemProvider refinementItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.Refinement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefinementAdapter() {
		if (refinementItemProvider == null) {
			refinementItemProvider = new RefinementItemProvider(this);
		}

		return refinementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.AndRefinement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndRefinementItemProvider andRefinementItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.AndRefinement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndRefinementAdapter() {
		if (andRefinementItemProvider == null) {
			andRefinementItemProvider = new AndRefinementItemProvider(this);
		}

		return andRefinementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.OrRefinement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrRefinementItemProvider orRefinementItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.OrRefinement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrRefinementAdapter() {
		if (orRefinementItemProvider == null) {
			orRefinementItemProvider = new OrRefinementItemProvider(this);
		}

		return orRefinementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.DomainProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainPropertyItemProvider domainPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.DomainProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainPropertyAdapter() {
		if (domainPropertyItemProvider == null) {
			domainPropertyItemProvider = new DomainPropertyItemProvider(this);
		}

		return domainPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.Requirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementItemProvider requirementItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.Requirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementAdapter() {
		if (requirementItemProvider == null) {
			requirementItemProvider = new RequirementItemProvider(this);
		}

		return requirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.OperacionalizationLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperacionalizationLinkItemProvider operacionalizationLinkItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.OperacionalizationLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperacionalizationLinkAdapter() {
		if (operacionalizationLinkItemProvider == null) {
			operacionalizationLinkItemProvider = new OperacionalizationLinkItemProvider(this);
		}

		return operacionalizationLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.DomainHypothesis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainHypothesisItemProvider domainHypothesisItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.DomainHypothesis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainHypothesisAdapter() {
		if (domainHypothesisItemProvider == null) {
			domainHypothesisItemProvider = new DomainHypothesisItemProvider(this);
		}

		return domainHypothesisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.DomainInvariant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainInvariantItemProvider domainInvariantItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.DomainInvariant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainInvariantAdapter() {
		if (domainInvariantItemProvider == null) {
			domainInvariantItemProvider = new DomainInvariantItemProvider(this);
		}

		return domainInvariantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.ResolutionLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResolutionLinkItemProvider resolutionLinkItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.ResolutionLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResolutionLinkAdapter() {
		if (resolutionLinkItemProvider == null) {
			resolutionLinkItemProvider = new ResolutionLinkItemProvider(this);
		}

		return resolutionLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link KAOSModel.ResponsabilityLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponsabilityLinkItemProvider responsabilityLinkItemProvider;

	/**
	 * This creates an adapter for a {@link KAOSModel.ResponsabilityLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponsabilityLinkAdapter() {
		if (responsabilityLinkItemProvider == null) {
			responsabilityLinkItemProvider = new ResponsabilityLinkItemProvider(this);
		}

		return responsabilityLinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
