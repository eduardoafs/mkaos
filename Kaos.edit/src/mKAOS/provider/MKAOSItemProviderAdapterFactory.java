/**
 */
package mKAOS.provider;

import java.util.ArrayList;
import java.util.Collection;

import mKAOS.util.MKAOSAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MKAOSItemProviderAdapterFactory extends MKAOSAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MKAOSItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.mKAOS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected mKAOSItemProvider mKAOSItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.mKAOS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createmKAOSAdapter() {
		if (mKAOSItemProvider == null) {
			mKAOSItemProvider = new mKAOSItemProvider(this);
		}

		return mKAOSItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.Mission} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MissionItemProvider missionItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.Mission}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMissionAdapter() {
		if (missionItemProvider == null) {
			missionItemProvider = new MissionItemProvider(this);
		}

		return missionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.EmergentBehavior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmergentBehaviorItemProvider emergentBehaviorItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.EmergentBehavior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmergentBehaviorAdapter() {
		if (emergentBehaviorItemProvider == null) {
			emergentBehaviorItemProvider = new EmergentBehaviorItemProvider(this);
		}

		return emergentBehaviorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.ConstituentSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstituentSystemItemProvider constituentSystemItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.ConstituentSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstituentSystemAdapter() {
		if (constituentSystemItemProvider == null) {
			constituentSystemItemProvider = new ConstituentSystemItemProvider(this);
		}

		return constituentSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.Mediator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MediatorItemProvider mediatorItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.Mediator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMediatorAdapter() {
		if (mediatorItemProvider == null) {
			mediatorItemProvider = new MediatorItemProvider(this);
		}

		return mediatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.OperationalCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationalCapabilityItemProvider operationalCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.OperationalCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationalCapabilityAdapter() {
		if (operationalCapabilityItemProvider == null) {
			operationalCapabilityItemProvider = new OperationalCapabilityItemProvider(this);
		}

		return operationalCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.CommunicationalCapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicationalCapabilityItemProvider communicationalCapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.CommunicationalCapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommunicationalCapabilityAdapter() {
		if (communicationalCapabilityItemProvider == null) {
			communicationalCapabilityItemProvider = new CommunicationalCapabilityItemProvider(this);
		}

		return communicationalCapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.EmergeLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmergeLinkItemProvider emergeLinkItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.EmergeLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmergeLinkAdapter() {
		if (emergeLinkItemProvider == null) {
			emergeLinkItemProvider = new EmergeLinkItemProvider(this);
		}

		return emergeLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.CommunicationInputLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicationInputLinkItemProvider communicationInputLinkItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.CommunicationInputLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommunicationInputLinkAdapter() {
		if (communicationInputLinkItemProvider == null) {
			communicationInputLinkItemProvider = new CommunicationInputLinkItemProvider(this);
		}

		return communicationInputLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.CommunicationOutputLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicationOutputLinkItemProvider communicationOutputLinkItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.CommunicationOutputLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommunicationOutputLinkAdapter() {
		if (communicationOutputLinkItemProvider == null) {
			communicationOutputLinkItemProvider = new CommunicationOutputLinkItemProvider(this);
		}

		return communicationOutputLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.DisruptLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisruptLinkItemProvider disruptLinkItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.DisruptLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisruptLinkAdapter() {
		if (disruptLinkItemProvider == null) {
			disruptLinkItemProvider = new DisruptLinkItemProvider(this);
		}

		return disruptLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.SuportLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuportLinkItemProvider suportLinkItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.SuportLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuportLinkAdapter() {
		if (suportLinkItemProvider == null) {
			suportLinkItemProvider = new SuportLinkItemProvider(this);
		}

		return suportLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.BlockLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockLinkItemProvider blockLinkItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.BlockLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockLinkAdapter() {
		if (blockLinkItemProvider == null) {
			blockLinkItemProvider = new BlockLinkItemProvider(this);
		}

		return blockLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.DependencyLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependencyLinkItemProvider dependencyLinkItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.DependencyLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependencyLinkAdapter() {
		if (dependencyLinkItemProvider == null) {
			dependencyLinkItemProvider = new DependencyLinkItemProvider(this);
		}

		return dependencyLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.InfluenceLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfluenceLinkItemProvider influenceLinkItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.InfluenceLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfluenceLinkAdapter() {
		if (influenceLinkItemProvider == null) {
			influenceLinkItemProvider = new InfluenceLinkItemProvider(this);
		}

		return influenceLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.GeneralizationLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneralizationLinkItemProvider generalizationLinkItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.GeneralizationLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneralizationLinkAdapter() {
		if (generalizationLinkItemProvider == null) {
			generalizationLinkItemProvider = new GeneralizationLinkItemProvider(this);
		}

		return generalizationLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.CompositionLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositionLinkItemProvider compositionLinkItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.CompositionLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositionLinkAdapter() {
		if (compositionLinkItemProvider == null) {
			compositionLinkItemProvider = new CompositionLinkItemProvider(this);
		}

		return compositionLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.MissionRefinement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MissionRefinementItemProvider missionRefinementItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.MissionRefinement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMissionRefinementAdapter() {
		if (missionRefinementItemProvider == null) {
			missionRefinementItemProvider = new MissionRefinementItemProvider(this);
		}

		return missionRefinementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.DynBLTL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DynBLTLItemProvider dynBLTLItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.DynBLTL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDynBLTLAdapter() {
		if (dynBLTLItemProvider == null) {
			dynBLTLItemProvider = new DynBLTLItemProvider(this);
		}

		return dynBLTLItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleTemporal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleTemporalItemProvider ruleTemporalItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleTemporal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleTemporalAdapter() {
		if (ruleTemporalItemProvider == null) {
			ruleTemporalItemProvider = new RuleTemporalItemProvider(this);
		}

		return ruleTemporalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleBound} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleBoundItemProvider ruleBoundItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleBound}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleBoundAdapter() {
		if (ruleBoundItemProvider == null) {
			ruleBoundItemProvider = new RuleBoundItemProvider(this);
		}

		return ruleBoundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleImplication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleImplicationItemProvider ruleImplicationItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleImplication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleImplicationAdapter() {
		if (ruleImplicationItemProvider == null) {
			ruleImplicationItemProvider = new RuleImplicationItemProvider(this);
		}

		return ruleImplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleDisjunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleDisjunctionItemProvider ruleDisjunctionItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleDisjunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleDisjunctionAdapter() {
		if (ruleDisjunctionItemProvider == null) {
			ruleDisjunctionItemProvider = new RuleDisjunctionItemProvider(this);
		}

		return ruleDisjunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleConjunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleConjunctionItemProvider ruleConjunctionItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleConjunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleConjunctionAdapter() {
		if (ruleConjunctionItemProvider == null) {
			ruleConjunctionItemProvider = new RuleConjunctionItemProvider(this);
		}

		return ruleConjunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleEquality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleEqualityItemProvider ruleEqualityItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleEquality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleEqualityAdapter() {
		if (ruleEqualityItemProvider == null) {
			ruleEqualityItemProvider = new RuleEqualityItemProvider(this);
		}

		return ruleEqualityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleRelExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleRelExpItemProvider ruleRelExpItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleRelExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleRelExpAdapter() {
		if (ruleRelExpItemProvider == null) {
			ruleRelExpItemProvider = new RuleRelExpItemProvider(this);
		}

		return ruleRelExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleNumExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleNumExpItemProvider ruleNumExpItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleNumExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleNumExpAdapter() {
		if (ruleNumExpItemProvider == null) {
			ruleNumExpItemProvider = new RuleNumExpItemProvider(this);
		}

		return ruleNumExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleTermItemProvider ruleTermItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleTermAdapter() {
		if (ruleTermItemProvider == null) {
			ruleTermItemProvider = new RuleTermItemProvider(this);
		}

		return ruleTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleFactor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleFactorItemProvider ruleFactorItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleFactor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleFactorAdapter() {
		if (ruleFactorItemProvider == null) {
			ruleFactorItemProvider = new RuleFactorItemProvider(this);
		}

		return ruleFactorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleVarItemProvider ruleVarItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleVarAdapter() {
		if (ruleVarItemProvider == null) {
			ruleVarItemProvider = new RuleVarItemProvider(this);
		}

		return ruleVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleFunctionItemProvider ruleFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleFunctionAdapter() {
		if (ruleFunctionItemProvider == null) {
			ruleFunctionItemProvider = new RuleFunctionItemProvider(this);
		}

		return ruleFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleParams} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleParamsItemProvider ruleParamsItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleParams}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleParamsAdapter() {
		if (ruleParamsItemProvider == null) {
			ruleParamsItemProvider = new RuleParamsItemProvider(this);
		}

		return ruleParamsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleIntegerLit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleIntegerLitItemProvider ruleIntegerLitItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleIntegerLit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleIntegerLitAdapter() {
		if (ruleIntegerLitItemProvider == null) {
			ruleIntegerLitItemProvider = new RuleIntegerLitItemProvider(this);
		}

		return ruleIntegerLitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleFloatLit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleFloatLitItemProvider ruleFloatLitItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleFloatLit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleFloatLitAdapter() {
		if (ruleFloatLitItemProvider == null) {
			ruleFloatLitItemProvider = new RuleFloatLitItemProvider(this);
		}

		return ruleFloatLitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleTupleLit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleTupleLitItemProvider ruleTupleLitItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleTupleLit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleTupleLitAdapter() {
		if (ruleTupleLitItemProvider == null) {
			ruleTupleLitItemProvider = new RuleTupleLitItemProvider(this);
		}

		return ruleTupleLitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mKAOS.RuleSeqLit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleSeqLitItemProvider ruleSeqLitItemProvider;

	/**
	 * This creates an adapter for a {@link mKAOS.RuleSeqLit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleSeqLitAdapter() {
		if (ruleSeqLitItemProvider == null) {
			ruleSeqLitItemProvider = new RuleSeqLitItemProvider(this);
		}

		return ruleSeqLitItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (mKAOSItemProvider != null) mKAOSItemProvider.dispose();
		if (missionItemProvider != null) missionItemProvider.dispose();
		if (emergentBehaviorItemProvider != null) emergentBehaviorItemProvider.dispose();
		if (constituentSystemItemProvider != null) constituentSystemItemProvider.dispose();
		if (mediatorItemProvider != null) mediatorItemProvider.dispose();
		if (operationalCapabilityItemProvider != null) operationalCapabilityItemProvider.dispose();
		if (communicationalCapabilityItemProvider != null) communicationalCapabilityItemProvider.dispose();
		if (emergeLinkItemProvider != null) emergeLinkItemProvider.dispose();
		if (communicationInputLinkItemProvider != null) communicationInputLinkItemProvider.dispose();
		if (communicationOutputLinkItemProvider != null) communicationOutputLinkItemProvider.dispose();
		if (disruptLinkItemProvider != null) disruptLinkItemProvider.dispose();
		if (suportLinkItemProvider != null) suportLinkItemProvider.dispose();
		if (blockLinkItemProvider != null) blockLinkItemProvider.dispose();
		if (dependencyLinkItemProvider != null) dependencyLinkItemProvider.dispose();
		if (influenceLinkItemProvider != null) influenceLinkItemProvider.dispose();
		if (generalizationLinkItemProvider != null) generalizationLinkItemProvider.dispose();
		if (compositionLinkItemProvider != null) compositionLinkItemProvider.dispose();
		if (missionRefinementItemProvider != null) missionRefinementItemProvider.dispose();
		if (dynBLTLItemProvider != null) dynBLTLItemProvider.dispose();
		if (ruleTemporalItemProvider != null) ruleTemporalItemProvider.dispose();
		if (ruleBoundItemProvider != null) ruleBoundItemProvider.dispose();
		if (ruleImplicationItemProvider != null) ruleImplicationItemProvider.dispose();
		if (ruleDisjunctionItemProvider != null) ruleDisjunctionItemProvider.dispose();
		if (ruleConjunctionItemProvider != null) ruleConjunctionItemProvider.dispose();
		if (ruleEqualityItemProvider != null) ruleEqualityItemProvider.dispose();
		if (ruleRelExpItemProvider != null) ruleRelExpItemProvider.dispose();
		if (ruleNumExpItemProvider != null) ruleNumExpItemProvider.dispose();
		if (ruleTermItemProvider != null) ruleTermItemProvider.dispose();
		if (ruleFactorItemProvider != null) ruleFactorItemProvider.dispose();
		if (ruleVarItemProvider != null) ruleVarItemProvider.dispose();
		if (ruleFunctionItemProvider != null) ruleFunctionItemProvider.dispose();
		if (ruleParamsItemProvider != null) ruleParamsItemProvider.dispose();
		if (ruleIntegerLitItemProvider != null) ruleIntegerLitItemProvider.dispose();
		if (ruleFloatLitItemProvider != null) ruleFloatLitItemProvider.dispose();
		if (ruleTupleLitItemProvider != null) ruleTupleLitItemProvider.dispose();
		if (ruleSeqLitItemProvider != null) ruleSeqLitItemProvider.dispose();
	}

}
